<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.gdu.prj.dao.board_t"> <!-- DOCTYPE mapper  -->
  
   <!--
    parameterType
    1. 쿼리문으로 전달되는 파라미터의 타입을 명시한다.
    2. 작성 예시
      1) parameterType="com.gdu.prj.dto.BoardDto"
      2) parameterType="Map"
      3) parameterType="String" - 변수를 하나만 전달하는 경우 생략할 수 있다.
      4) parameterType="int"    - 변수를 하나만 전달하는 경우 생략할 수 있다.
      5) parameterType="double" - 변수를 하나만 전달하는 경우 생략할 수 있다.
  -->
  
  <!--
    parameter 작성 방법
    1. #{}
      1) PreparedStatement 를 이용하여 ? 에 값을 저장하는 JDBC 방식으로 처리한다.
      2) 변수 값을 처리할 때 사용한다.
      2) 객체나 Map 에 저장된 프로퍼티(필드, Key)를 입력한다.
    2. ${}
      1) 문자열 대체는 전달된 값을 따옴표나 이스케이프 없이 그대로 사용한다.
      2) SQL 구문의 메타데이터(테이블 이름, 칼럼 이름, SQL 자체)를 처리할 때 사용한다.
  -->

  <!--
    resultType
    1. SELECT 문의 반환 값의 타입을 명시한다.
    2. INSERT / UPDATE / DELETE 는 resultType 속성을 작성하지 않는다. (resultType="int" 로 미리 정의되어 있다.)
    3. 작성 예시
      1) resultType="com.gdu.prj.dto.BoardDto"
      2) resultType="int"
      3) resultType="double"
  -->
  
  
   <insert id="insertBoard"
           parameterType="com.gdu.prj.dto.BoardDto"> <!-- 쿼리문은 id를 주어 분리함 => id는 해당 쿼리문을 호출하는 메소드명으로 적용 -->
      INSERT INTO BOARD_T(
          BOARD_NO
        , TITLE
        , CONTENTS
        , MODIFIED_AT
        , CREATED_AT
      ) VALUES (
          BOARD_SEQ.NEXTVAL
        , #{title}      <!-- title, contents 필드명 => myBatis는 해당 필드를 com.gdu.prj.dto.BoardDto 여기서 찾음 -->
        , #{contents}
        , CURRENT_DATE
        , CURRENT_DATE
      );
   </insert>
   
   <update id="updateBoard"
           parameterType="com.gdu.prj.dto.BoardDto">
       UPDATE BOARD_T(
         SET TITLE = #{title} <!-- 실제 실행 코드 : ps.setString(1,board.getTitle()) =>  getter가 없으면 오류남  -->
           , CONTENTS = #{contents}
           , MODIFIED_AT = CURRENT_DATE 
         WHERE #{board_no}
       );
   </update>
   
   
   <delete id="deleteBoard"> <!-- 파라미터가 단 1개만 넘어올 경우 => 파라미터 생략 가능 -->
       DELETE FROM BOARD_T 
        WHERE #{board_no}; 
   </delete>
   
   <select id="selectBoardList"
           parameterType="Map"
           resultType="com.gdu.prj.dto.BoardDto"> <!-- map을 전달할 경우 => 반드시 parameterType에 Map 작성 (parameterMap 사용 X) -->
      SELECT BOARD_NO, TITLE, CONTENTS, MODIFIED_AT, CREATED_AT
        FROM (SELECT ROW_NUMBER() OVER(ORDER BY BOARD_NO ${sort}) AS RN, BOARD_NO, TITLE, CONTENTS, MODIFIED_AT, CREATED_AT <!-- ${} 로 묶으면 ''(작은따옴표) 나오지 않음 -->
                 FROM BOARD_T)
       WHERE RN BETWEEN #{begin} AND #{end} <!-- #{} 는 문자처리할 때 사용 => ''(작은따옴표) 가 포함됨 => 숫자를 작은따옴표로 묶는 것은 아무 상관 없지만(내부적으로 자동처리) -->
        <!-- 
        
          모든 변수 => #{}
          쿼리문 자체 구성 => ${}
          
         ex) SELECT ROW_NUMBER()OVER (ORDER BY ${column} ${sort}) => 어떠한 칼럼으로 어떻게 정렬하겠다.
        
        RN : Dto에서 꺼내서 쓸 수 있으며, int 타입으로 BoardDto 필드에 선언함
        
         -->
   </select>
   
   <select id="getBoardCount"
           resultType="int">
       SELECT COUNT(*) 
         FROM BOARD_T 
   </select>
   
   <select id="selectBoardByNo"
           resultType="com.gdu.prj.dto.BoardDto"> <!-- 목록보기와 상세보기는 반환타입이 동일함 -->
      SELECT BOARD_NO, TITLE, CONTENTS, MODIFIED_AT, CREATED_AT 
        FROM BOARD_T 
       WHERE #{board_no}
   </select>
  
 </mapper>